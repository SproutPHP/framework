#!/usr/bin/env php
<?php

use Core\Console\Commands\MakeComponent;
use Core\Console\Commands\MakeController;
use Core\Console\Commands\MakeModel;
use Core\Console\Commands\MakeResource;
use Core\Console\Commands\MakeRoute;
use Core\Console\Commands\MakeView;

require_once __DIR__ . '/vendor/autoload.php';

$command = $argv[1] ?? null;
$target = $argv[2] ?? null;

switch ($command) {
    case 'grow':
        echo "üå± SproutPHP growing at http://localhost:9090\n";
        passthru('php -S localhost:9090 -t public');
        break;

    case 'make:controller':
        if (!$target) {
            echo "‚ùå Please provide a controller name.\n";
            exit(1);
        }
        MakeController::handle($target);
        break;

    case 'make:model':
        if (!$target) {
            echo "‚ùå Please provide a model name.\n";
            exit(1);
        }
        MakeModel::handle($target);
        break;

    case 'make:view':
        if (!$target) {
            echo "‚ùå Please provide a view name.\n";
            exit(1);
        }
        $flags = array_slice($argv, 3);
        MakeView::handle($target, $flags);
        break;

    case 'make:resource':
        if (!$target) {
            echo "‚ùå Please provide a resource name.\n";
            exit(1);
        }
        MakeResource::handle($target);
        break;

    case 'make:route':
        if (!$target) {
            echo "‚ùå Please provide a route name.\n";
            exit(1);
        }
        MakeRoute::handle($target);
        break;

    case 'make:component':
        if (!$target) {
            echo "‚ùå Please provide a component name.\n";
            exit(1);
        }
        MakeComponent::handle($target);
        break;

    case 'env':
        $envValue = $target ?? null;

        if (!$envValue || !in_array($envValue, ['local', 'production'])) {
            echo "‚ùå Please provide a valid environment: local | production\n";
            exit(1);
        }

        $envPath = __DIR__ . '/.env';
        $lines = file($envPath);
        $newLines = [];

        foreach ($lines as $line) {
            if (strpos($line, 'APP_ENV=') === 0) {
                $newLines[] = "APP_ENV={$envValue}\n";
            } else {
                $newLines[] = $line;
            }
        }

        file_put_contents($envPath, implode('', $newLines));
        echo "‚úÖ Environment set to '{$envValue}'\n";
        break;

    case 'logs':
        $logFile = __DIR__ . '/storage/logs/error.log';

        if (!file_exists($logFile)) {
            echo "‚ö†Ô∏è No logs found at: storage/logs/error.log\n";
            exit(0);
        }

        $lines = file($logFile);
        $count = count($lines);

        echo "üìÑ Showing last 20 lines of error.log:\n\n";

        $lastLines = array_slice($lines, max(0, $count - 20));

        foreach ($lastLines as $line) {
            echo $line;
        }
        break;

    case 'seed':
        echo "üåæ This feature will generate starter files (coming soon!)\n";
        break;

    case 'prune':
        echo "‚úÇÔ∏è  Pruning unused files (feature coming soon)\n";
        break;

    case 'bloom':
        echo "üå∏ Preparing production build (coming soon)\n";
        break;

    case 'version':
        if ($argv[1] === 'version') {
            $repo = 'SproutPHP/framework'; // change to your repo
            $url = "https://api.github.com/repos/$repo/releases";
            $opts = [
                "http" => [
                    "header" => "User-Agent: sprout-cli\r\n"
                ]
            ];
            $context = stream_context_create($opts);
            $json = file_get_contents($url, false, $context);
            $data = json_decode($json, true);

            if (is_array($data) && count($data) > 0) {
                $tag = $data[0]['tag_name'] ?? 'unknown';
                $isPrerelease = $data[0]['prerelease'] ? ' (pre-release)' : '';
                echo "SproutPHP latest release: $tag$isPrerelease\n";
            } else {
                echo "SproutPHP latest release: unknown\n";
            }
            exit;
        }
        break;

    case 'info':
        echo "üåø SproutPHP Info\n";
        echo "--------------------\n";

        $release = getLatestRelease();
        // Version (optional to make dynamic later)
        echo "Framework Version: {$release}\n";

        // Check HTMX
        $htmx = file_exists(__DIR__ . '/public/assets/js/sprout.min.js') ? '‚úîÔ∏è' : '‚ùå';
        echo "HTMX: {$htmx} loaded\n";

        // Check PicoCSS
        $css = file_exists(__DIR__ . '/public/assets/css/sprout.min.css') ? '‚úîÔ∏è' : '‚ùå';
        echo "PicoCSS: {$css} loaded\n";

        // Twig check
        if (class_exists(\Twig\Environment::class)) {
            echo "Twig Engine: ‚úîÔ∏è enabled\n";
        } else {
            echo "Twig Engine: ‚ùå not available\n";
        }

        // Environment
        $env = env('APP_ENV') ?? 'unknown';
        echo "Environment: {$env}\n";

        // Debug
        $debug = env('APP_DEBUG') === 'true' ? '‚úîÔ∏è' : '‚ùå';
        echo "Debug Mode: {$debug}\n";

        // PHP Version
        echo "PHP Version: " . PHP_VERSION . "\n";

        break;

    case 'help':
    default:
        echo "üåø SproutPHP CLI\n";
        echo "Usage:\n";
        echo "  php sprout grow             Start the development server\n";
        echo "  php sprout make:controller  Make a controller\n";
        echo "  php sprout make:model       Make a model\n";
        echo "  php sprout make:view        Make a view (use --htmx flag to create htmx view & route setup)\n";
        echo "  php sprout make:resource    Auto-generate MVC resources including routes\n";
        echo "  php sprout make:route       Register routes for your particular controller\n";
        echo "  php sprout env production   To switch to production|local\n";
        echo "  php sprout logs             Shows recent errors from logs\n";
        echo "  php sprout seed             Generate files (coming soon)\n";
        echo "  php sprout prune            Remove unwanted files (coming soon)\n";
        echo "  php sprout bloom            Build for production (coming soon)\n";
        echo "  php sprout version          Show framework version\n";
        echo "  php sprout info             Show framework information\n";
        break;
}
